{"name":"The Lion Fish Scuba Store","tagline":"Final Project for CS 445","body":"**Author:** Dorian Karter\r\n\r\n**What is it:**  A final project for CS 445 - Object Oriented Design Programming.\r\n\r\n**College:** Illinois Institute of Technology\r\n\r\n#Project Memo\r\n\r\n##Project Status\r\nThe full requirements for functionality of the software have been implemented. This web app was built for the owner of the business only. \r\n\r\n###Tours\r\n- the ability to create (valid) tours\r\n- define their parameters\r\n- cancel them (with refund to customers)\r\n- search by dates\r\n- see details\r\n- edit the tours.\r\n- automatically refund difference on fully paid bookings to customers on price decrease\r\n\r\n###Bookings\r\n- create a (valid) booking for customer for a specific tour\r\n- pay for booking or leave it unpaid (once paid setting to unpaid will not refund the money -for that you need to cancel the booking [to activate the logic])\r\n- Cancel a booking\r\n- Edit a booking\r\n-  see the price you need to pay per seats selected (only in the modal popup form where the tour selected is known before the form loads)\r\n\r\n\r\n###Customers\r\n- Create a (valid) customer (must have unique email)\r\n- Delete customer\r\n- See all customer transactions/bookings and spendings/refunds\r\n- see total spent by customer\r\n- edit customer details\r\n\r\n###Reports\r\n- see all ‘Accounting Transactions’ money in/out\r\n- everything is automated\r\n- allow deleting of record but with warning that it might mess up the data (feature relatively hidden)\r\n- view total earnings for business\r\n- see reason for transactions\r\n- auto color coded for easy differentiation\r\n\r\n\r\n##Project Details\r\nThe project was built using *Ruby v1.9.3*, *Rails 3.2*, *CoffeeScript*, *JavaScript*, *Sass*, and *CSS*.\r\nThe database used is *SQLite 3* for development and test and *PostgreSQL* for production.\r\nFor UI Twitter Bootstrap was used.\r\n\r\n##Deliverables\r\n###Web Interface\r\nThe project can be accessed via the web interface at\r\nhttp://lfss.herokuapp.com\r\n\r\n###Source Code\r\nThe repository can be cloned at https://github.com/dkarter/The-Lion-Fish-Scuba-Store or by using the following command:\r\n\t\r\n\t$> git clone git@github.com:dkarter/The-Lion-Fish-Scuba-Store.git\r\n\r\n###Building\r\nThe project can be built by running the following command:\r\n\r\n\t$> bundle install\r\n\r\nThe database can then be populated by using the following commands:\r\n\r\n\t$> rake db:migrate \r\nThe app can then be run by using the following command:\r\n\r\n\t$> rails s \r\nAnd visiting localhost:3000/ on your browser.\r\n\r\n###Testing\r\n\r\nBasic tests for user interaction were developed using Cucumber and Capybara, but **not completed** due to time constraints.\r\nTest case files can be found in the ‘features’ directory of the code. Test can be run via the following command:\r\n\t\r\n\t$> cucumber features/\r\n\r\n##Additional Details\r\n###Hours to completion: \r\nI estimate around 110 hours including design, setup, and learning required.\r\n\r\n###Difficulties:\r\nMy biggest difficulty was writing the tests in *Cucumber* and *Capybara* since I have never used these technologies before. I was running out of time and decided to skip most of them and just jump right into functionality. \r\n\r\nThe functionality took a very long time to develop and perfect and I was trying to learn *Sass* and *CoffeeScript* along the way to make the interface perfect while picking up new skills.\r\n\r\nIt was a very stressful but an enjoyable learning experience.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}